org: johan1
app: quiztopia
service: quiztopia

frameworkVersion: "4"

provider:
  name: aws
  runtime: nodejs20.x
  stage: dev
  region: eu-north-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.UsersTable}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.UsersTable}/index/UsernameIndex
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.QuizzesTable}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.LeaderboardTable}

  environment:
    DYNAMODB_USERS_TABLE: ${self:custom.tables.UsersTable}
    DYNAMODB_QUIZZES_TABLE: ${self:custom.tables.QuizzesTable}
    DYNAMODB_LEADERBOARD_TABLE: ${self:custom.tables.LeaderboardTable}
    JWT_SECRET: potatis

custom:
  tables:
    UsersTable: "UsersTable-${sls:stage}"
    QuizzesTable: "QuizzesTable-${sls:stage}"
    LeaderboardTable: "LeaderboardTable-${sls:stage}"

package:
  individually: true
  include:
    - handlers/**

functions:
  api:
    handler: handler.handler
    events:
      - http:
          path: /register
          method: POST
      - http:
          path: /login
          method: POST
      - http:
          path: /quizzes
          method: GET
      - http:
          path: /quizzes
          method: POST
      - http:
          path: /quizzes/{quizId}
          method: GET
      - http:
          path: /quizzes/{quizId}/questions
          method: POST
      - http:
          path: /quizzes/{quizId}
          method: DELETE
      - http:
          path: /quizzes/{quizId}/score
          method: POST
      - http:
          path: /quizzes/{quizId}/leaderboard
          method: GET

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tables.UsersTable}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UsernameIndex # Skapa GSI för username
            KeySchema:
              - AttributeName: username
                KeyType: HASH # username är HASH-nyckeln för GSI
            Projection:
              ProjectionType: ALL # Returnera alla attribut i GSI-resultat
        BillingMode: PAY_PER_REQUEST

    QuizzesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tables.QuizzesTable}
        AttributeDefinitions:
          - AttributeName: quizId
            AttributeType: S
        KeySchema:
          - AttributeName: quizId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    LeaderboardTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tables.LeaderboardTable}
        AttributeDefinitions:
          - AttributeName: quizId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: quizId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
